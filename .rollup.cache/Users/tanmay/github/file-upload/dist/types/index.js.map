{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/components/file-upload/types/index.ts"],"names":[],"mappings":"","sourcesContent":["import type { FileWithPreview } from \"../hooks/use-file-upload\";\n\n// Re-export hook types\nexport type {\n  FileMetadata,\n  FileWithPreview,\n  FileUploadOptions,\n  FileUploadState,\n  FileUploadActions,\n} from \"../hooks/use-file-upload\";\n\n// Component variant types\nexport type FileUploadVariant = \"button\" | \"dropzone\" | \"preview\" | \"compact\";\nexport type FileUploadSize = \"sm\" | \"md\" | \"lg\";\nexport type FileUploadRadius = \"none\" | \"sm\" | \"md\" | \"lg\" | \"full\";\n\n// Configuration types\nexport interface FileUploadConfig {\n  variant: FileUploadVariant;\n  size: FileUploadSize;\n  radius: FileUploadRadius;\n  multiple: boolean;\n  maxFiles: number;\n  maxSize: number; // in bytes\n  accept: string;\n  disabled: boolean;\n  showPreview: boolean;\n  showProgress: boolean;\n  allowRemove: boolean;\n  labels: {\n    dropzone: string;\n    button: string;\n    dragActive: string;\n    maxFiles: string;\n    maxSize: string;\n    fileType: string;\n    remove: string;\n    clear: string;\n  };\n  icons: {\n    upload: string;\n    file: string;\n    image: string;\n    remove: string;\n    error: string;\n  };\n  styles: {\n    container: string;\n    dropzone: string;\n    button: string;\n    preview: string;\n    error: string;\n  };\n}\n\n// Component props\nexport interface FileUploadProps\n  extends Omit<Partial<FileUploadConfig>, \"labels\"> {\n  className?: string;\n  onFilesChange?: (files: FileWithPreview[]) => void;\n  onFilesAdded?: (files: FileWithPreview[]) => void;\n  onError?: (errors: string[]) => void;\n  initialFiles?: FileWithPreview[];\n  labels?: Partial<FileUploadConfig[\"labels\"]>;\n}\n\n// Config-driven renderer props\nexport interface FileUploadRendererProps {\n  config: FileUploadConfig;\n  className?: string;\n  onFilesChange?: (files: FileWithPreview[]) => void;\n  onFilesAdded?: (files: FileWithPreview[]) => void;\n  onError?: (errors: string[]) => void;\n  initialFiles?: FileWithPreview[];\n}\n\n// Preset configurations\nexport type FileUploadPreset =\n  | \"default\"\n  | \"image-upload\"\n  | \"document-upload\"\n  | \"multi-file\"\n  | \"compact\";\n\n// Theme configuration\nexport interface FileUploadTheme {\n  colors: {\n    primary: string;\n    secondary: string;\n    success: string;\n    error: string;\n    warning: string;\n    background: string;\n    foreground: string;\n    border: string;\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: {\n    none: string;\n    sm: string;\n    md: string;\n    lg: string;\n    full: string;\n  };\n  fontSize: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n}\n\n// Validation rules\nexport interface ValidationRule {\n  type: \"maxSize\" | \"fileType\" | \"maxFiles\" | \"minFiles\" | \"custom\";\n  value?: string | number;\n  message: string;\n  validator?: (file: File, files: File[]) => boolean;\n}\n\n// Progress tracking\nexport interface UploadProgress {\n  fileId: string;\n  progress: number;\n  status: \"pending\" | \"uploading\" | \"success\" | \"error\";\n  error?: string;\n}\n\n// File upload context\nexport interface FileUploadContextValue {\n  config: FileUploadConfig;\n  theme: FileUploadTheme;\n  updateConfig: (config: Partial<FileUploadConfig>) => void;\n  updateTheme: (theme: Partial<FileUploadTheme>) => void;\n}\n"]}